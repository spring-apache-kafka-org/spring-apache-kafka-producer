<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ion.mamaliga.spring.apache.kafka.producer</groupId>
    <artifactId>spring-apache-kafka-producer</artifactId>
    <version>${revision}</version>

    <properties>
        <revision>0.0.0</revision>
        <java.name>java${java.version}</java.name>
        <java.version>17</java.version>
        <final.name>${project.artifactId}-${project.version}</final.name>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <flyway.version>10.15.0</flyway.version>
        <maven.assembly.version>3.6.0</maven.assembly.version>
        <maven.clean.plugin.version>3.3.2</maven.clean.plugin.version>
        <maven.compiler.plugin.version>3.12.1</maven.compiler.plugin.version>
        <maven.docker.compose.maven.plugin.version>4.0.0</maven.docker.compose.maven.plugin.version>
        <maven.dockerfile.plugin.version>1.4.13</maven.dockerfile.plugin.version>
        <maven.deploy.plugin.version>3.1.1</maven.deploy.plugin.version>
        <maven.filesafe.plugin.version>3.2.5</maven.filesafe.plugin.version>
        <maven.flatten.plugin.version>1.6.0</maven.flatten.plugin.version>
        <maven.flyway.maven.plugin.version>${flyway.version}</maven.flyway.maven.plugin.version>
        <maven.install.plugin.version>3.1.1</maven.install.plugin.version>
        <maven.jar.plugin.version>3.3.0</maven.jar.plugin.version>
        <maven.jacoco.plugin.version>0.8.11</maven.jacoco.plugin.version>
        <maven.project.info.reports.plugin.version>3.5.0</maven.project.info.reports.plugin.version>
        <maven.resources.plugin.version>3.3.1</maven.resources.plugin.version>
        <maven.site.plugin.version>4.0.0-M13</maven.site.plugin.version>
        <maven.spring.boot.maven.plugin>${spring.boot.version}</maven.spring.boot.maven.plugin>
        <maven.surefire.plugin.version>3.2.5</maven.surefire.plugin.version>
        <maven.versions.maven.plugin>2.16.2</maven.versions.maven.plugin>
        <maven.war.plugin.version>3.4.0</maven.war.plugin.version>
        <openapi.generator.maven.plugin.version>7.3.0</openapi.generator.maven.plugin.version>
        <junit.jupiter.version>5.10.2</junit.jupiter.version>
        <lombok.version>1.18.30</lombok.version>
        <mockito.junit.jupiter.version>5.11.0</mockito.junit.jupiter.version>
        <openpojo.version>0.9.1</openpojo.version>
        <spring.boot.version>3.2.3</spring.boot.version>
        <spring.cloud.version>4.1.1</spring.cloud.version>
        <spring.cloud.openfeign.version>4.1.0</spring.cloud.openfeign.version>
        <spring.version>6.1.0</spring.version>
        <skipTests>false</skipTests>
        <skipUT>${skipTests}</skipUT>
        <skipIT>${skipTests}</skipIT>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
            <version>3.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.14.0</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <!--<dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>${mockito.junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.25.3</version>
            <scope>test</scope>
        </dependency>
        <!--<dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>4.0.0</version>
            <scope>test</scope>
        </dependency>-->
        <dependency>
            <groupId>com.openpojo</groupId>
            <artifactId>openpojo</artifactId>
            <version>${openpojo.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>${final.name}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven.clean.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven.deploy.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.filesafe.plugin.version}</version>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                            <!--Sets the VM argument line used when integration tests are run.-->
                            <argLine>${failsafeArgLine}</argLine>
                            <!--Skip running the integration tests when the integration phase is invoked-->
                            <skipTests>${skipIT}</skipTests>
                            <includes>
                                <!--Include integration tests within integration test phase-->
                                <include>**/*IT.java</include>
                            </includes>
                            <excludedGroups>
                                IntegrationD,
                                IntegrationF
                            </excludedGroups>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>${maven.install.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.plugin.version}</version>
                <executions>
                    <!--Prepares the property pointing to the JaCoCo runtime agent which is passed as VM argument when Maven the Surefire plugin is executed.-->
                    <execution>
                        <id>pre-ut</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/jacoco-coverage-reports/jacoco-ut.exec</destFile>
                            <!--Sets the name of the property containing the settings for JaCoCo runtime agent.-->
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!--Ensures that the code coverage report for unit tests is created after unit tests have been run.-->
                    <execution>
                        <id>post-ut</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/jacoco-coverage-reports/jacoco-ut.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                        </configuration>
                    </execution>
                    <!--Prepares the property pointing to the JaCoCo runtime agent which is passed as VM argument when Maven the Failsafe plugin is executed.-->
                    <execution>
                        <id>pre-it</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!--Sets the path to the file which contains the execution data.-->
                            <destFile>${project.build.directory}/jacoco-coverage-reports/jacoco-it.exec</destFile>
                            <!--Sets the name of the property containing the settings for JaCoCo runtime agent.-->
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!--Ensures that the code coverage report for integration tests after integration tests have been run.-->
                    <execution>
                        <id>post-it</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/jacoco-coverage-reports/jacoco-it.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ut-and-it</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <directory>${project.build.directory}/jacoco-coverage-reports/</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${project.build.directory}/jacoco-coverage-reports/jacoco-ut-and-it.exec</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ut-and-it-reports</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.build.directory}/jacoco-coverage-reports/jacoco-ut-and-it.exec</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut-and-it</outputDirectory>
                        </configuration>
                    </execution>
                    <!--<execution>
                        <id>jacoco-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.build.directory}/jacoco-coverage-reports/jacoco-ut-and-it.exec</dataFile>
                            <excludes>
                                &lt;!&ndash;TODO - fix this missing coverage &ndash;&gt;
                            </excludes>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>INSTRUCTION</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.73</minimum>
                                        </limit>
                                        <limit>
                                            <counter>BRANCH</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.50</minimum>
                                        </limit>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.77</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                                <rule>
                                    <element>PACKAGE</element>
                                    <limits>
                                        <limit>
                                            <counter>INSTRUCTION</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.07</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                                <rule>
                                    <element>CLASS</element>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.05</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>-->
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven.project.info.reports.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven.site.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the VM argument line used when unit tests are run. -->
                            <argLine>${surefireArgLine}</argLine>
                            <!--Skip running the unit tests when the test phase is invoked-->
                            <skipTests>${skipUT}</skipTests>
                            <includes>
                                <!--Include unit tests within test phase-->
                                <include>**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.war.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${maven.spring.boot.maven.plugin}</version>
                <configuration>
                    <finalName>${final.name}</finalName>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${maven.flatten.plugin.version}</version>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${maven.versions.maven.plugin}</version>
                <configuration>
                    <excludes>
                        <exclude>org.apache.commons:commons-collections4</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.9.4</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
    </build>
    <profiles>
        <profile>
            <id>build-docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>${maven.dockerfile.plugin.version}</version>
                        <configuration>
                            <contextDirectory>${project.basedir}</contextDirectory>
                            <dockerfile>Dockerfile</dockerfile>
                            <repository>${project.artifactId}</repository>
                            <tag>${project.version}</tag>
                            <buildArgs>
                                <serviceName>${project.artifactId}</serviceName>
                                <serviceVersion>${project.version}</serviceVersion>
                            </buildArgs>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>build-docker-container</id>
            <build>
                <plugins>
                    <!--Docker networking implementation between containers-->
                    <plugin>
                        <groupId>com.dkanejs.maven.plugins</groupId>
                        <artifactId>docker-compose-maven-plugin</artifactId>
                        <version>${maven.docker.compose.maven.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>stop</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <envVars>
                                        <serviceName>${project.artifactId}</serviceName>
                                        <serviceVersion>${project.version}</serviceVersion>
                                    </envVars>
                                    <composeFile>${docker.compose.file}</composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>down</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>down</goal>
                                </goals>
                                <configuration>
                                    <envVars>
                                        <serviceName>${project.artifactId}</serviceName>
                                        <serviceVersion>${project.version}</serviceVersion>
                                    </envVars>
                                    <removeImagesType>local</removeImagesType>
                                    <removeOrphans>true</removeOrphans>
                                    <removeVolumes>true</removeVolumes>
                                    <composeFile>${docker.compose.file}</composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>up</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>up</goal>
                                </goals>
                                <configuration>
                                    <envVars>
                                        <serviceName>${project.artifactId}</serviceName>
                                        <serviceVersion>${project.version}</serviceVersion>
                                    </envVars>
                                    <detachedMode>true</detachedMode>
                                    <composeFile>${docker.compose.file}</composeFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>